# Author: Zackary Hoyt

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

data_df = pd.read_csv("outputs/data.csv")

os.makedirs("outputs/plots", exist_ok=True)

inputs = data_df[['k','c','std_classes','std_samples','d','n_samples']].to_numpy()
inputs = np.concatenate([inputs, 1 / inputs], axis=1)
inputs = np.concatenate([np.ones((len(inputs),1)), inputs], axis=1)

relative_improvement_true_iko = 100 * (data_df.loss_kmeans / data_df.loss_iko - 1)
relative_improvement_true_nko = 100 * (data_df.loss_kmeans / data_df.loss_nko - 1)

################################################################################################################################

ymin, ymax = (-2, 4)
stepsize_major, stepsize_minor = (2, 0.25)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

# environmental_complexities = (data_df.std_samples ** 1 * data_df.c ** 1 * data_df.n_samples ** 1) ** 0.5 / (data_df.std_classes ** 1 * data_df.k ** 1 * data_df.d ** 0) ** 0.5
environmental_complexities = (data_df.c * data_df.std_samples * data_df.n_samples * data_df.d) ** 0.5 / (data_df.k * data_df.std_classes) ** 0.5
environmental_complexities -= np.min(environmental_complexities)
environmental_complexities /= np.max(environmental_complexities)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(environmental_complexities, relative_improvement_true_iko, marker='.', alpha=0.01, c='black')
plt.hlines(y=0, xmin=np.min(environmental_complexities), xmax=np.max(environmental_complexities), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Analysis - IKO", fontsize=8)
plt.xlabel("Environmental Complexity Heuristic", fontsize=8)
plt.ylabel("Loss Reduction (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.05, 1.05)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_analysis-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(environmental_complexities, relative_improvement_true_nko, marker='.', alpha=0.01, c='black')
plt.hlines(y=0, xmin=np.min(environmental_complexities), xmax=np.max(environmental_complexities), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Analysis - NKO", fontsize=8)
plt.xlabel("Environmental Complexity Heuristic", fontsize=8)
plt.ylabel("Loss Reduction (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.05, 1.05)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_analysis-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

################################################################################################################################

model = np.array([-0.060519, 0.02425, -0.010491, 0.01132, -0.000366, -0.022094, -0.007009, -0.731593, 0.308351, 0.188232, 0.086298, 0.671194, 2.644897])
y_intercept = model[0]
standardizer_std, standardizer_mean = (0.390684, 0.199375)
model_pred = standardizer_std * inputs @ model + standardizer_mean

ymin, ymax = (-2, 4)
stepsize_major, stepsize_minor = (2, 1/8)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, relative_improvement_true_iko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, relative_improvement_true_iko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.hlines(y=0, xmin=np.min(model_pred), xmax=np.max(model_pred), color='w', linewidth=0.75, alpha=0.75)
plt.vlines(x=0, ymin=np.min(relative_improvement_true_iko), ymax=np.max(relative_improvement_true_iko), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Model - IKO", fontsize=8)
plt.xlabel("Predicted (%)", fontsize=8)
plt.ylabel("Actual (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='major', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.25, 0.75)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_model-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

model = np.array([-0.242524, 0.007391, 0.001484, 0.000194, 0.001677, 0.002841, -0.001489, -0.313662, 0.240408, -0.063451, 0.190239, 0.641326, 0.909855])
y_intercept = model[0]
standardizer_std, standardizer_mean = (0.198772, 0.025514)
model_pred = standardizer_std * inputs @ model + standardizer_mean

stepsize_major, stepsize_minor = (2, 1/16)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, relative_improvement_true_nko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, relative_improvement_true_nko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.hlines(y=0, xmin=np.min(model_pred), xmax=np.max(model_pred), color='w', linewidth=0.75, alpha=0.75)
plt.vlines(x=0, ymin=np.min(relative_improvement_true_nko), ymax=np.max(relative_improvement_true_nko), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Model - NKO", fontsize=8)
plt.xlabel("Predicted (%)", fontsize=8)
plt.ylabel("Actual (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='major', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.0625, 0.1875)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_model-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

################################################################################################################################

ymin, ymax = (0, 35)
stepsize_major, stepsize_minor = (5, 0.25)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

solution_complexities = data_df.c ** 0.5 * data_df.n_samples ** 0.5# / (data_df.std_classes ** 0.5 / data_df.std_samples ** 0.5) ** 0.5
solution_complexities /= np.max(solution_complexities)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(solution_complexities, data_df.n_gens_kmeans, marker='.', alpha=0.05, c='black')
plt.title("Convergence Speed (# of Steps) Analysis - K-Means", fontsize=8)
plt.xlabel("Solution Complexity Heuristic", fontsize=8)
plt.ylabel("Convergence Speed (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(0, 1.125)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/convergence_speed_analysis-kmeans.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(solution_complexities, data_df.n_gens_iko, marker='.', alpha=0.05, c='black')
plt.title("Convergence Speed (# of Steps) Analysis - IKO", fontsize=8)
plt.xlabel("Solution Complexity Heuristic", fontsize=8)
plt.ylabel("Convergence Speed (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(0, 1.125)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/convergence_speed_analysis-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(solution_complexities, data_df.n_gens_nko, marker='.', alpha=0.05, c='black')
plt.title("Convergence Speed (# of Steps) Analysis - NKO", fontsize=8)
plt.xlabel("Solution Complexity Heuristic", fontsize=8)
plt.ylabel("Convergence Speed (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(0, 1.125)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/convergence_speed_analysis-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

################################################################################################################################

ymin, ymax = (-5, 35)
stepsize_major, stepsize_minor = (5, 1)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

model = np.array([0.085778, -0.071195, 0.173776, -0.072416, 0.025728, -0.042542, 0.028924, -1.824912, -0.69175, 0.043651, -1.402478, 0.045259, -3.43624])
y_intercept = model[0]
standardizer_std, standardizer_mean = (4.352952, 8.985304)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, data_df.n_gens_kmeans, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, data_df.n_gens_kmeans, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.title("Convergence Speed (# of Steps) Model - K-Means", fontsize=8)
plt.xlabel("Predicted (# of Steps)", fontsize=8)
plt.ylabel("Actual (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(ymin, ymax)
ax.set_ylim(ymin, ymax)
plt.gca().set_aspect("equal")
plt.savefig("outputs/plots/convergence_speed_model-kmeans.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

model = np.array([1.376642, -0.024892, 0.102339, -0.045036, 0.055755, -0.059945, 0.006675, -2.997136, -1.218197, 0.097237, -1.558839, -0.131065, -7.947001])
y_intercept = model[0]
standardizer_std, standardizer_mean = (3.943964, 19.352101)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, data_df.n_gens_iko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, data_df.n_gens_iko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.title("Convergence Speed (# of Steps) Model - IKO", fontsize=8)
plt.xlabel("Predicted (# of Steps)", fontsize=8)
plt.ylabel("Actual (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(ymin, ymax)
ax.set_ylim(ymin, ymax)
plt.gca().set_aspect("equal")
plt.savefig("outputs/plots/convergence_speed_model-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

model = np.array([0.61831, -0.056249, 0.151561, -0.062377, 0.04301, -0.066236, 0.021014, -2.514676, -0.841194, 0.032072, -1.489753, 0.258333, -5.317314])
y_intercept = model[0]
standardizer_std, standardizer_mean = (4.927581, 15.664140)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, data_df.n_gens_nko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, data_df.n_gens_nko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.title("Convergence Speed (# of Steps) Model - NKO", fontsize=8)
plt.xlabel("Predicted (# of Steps)", fontsize=8)
plt.ylabel("Actual (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(ymin, ymax)
ax.set_ylim(ymin, ymax)
plt.gca().set_aspect("equal")
plt.savefig("outputs/plots/convergence_speed_model-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)
