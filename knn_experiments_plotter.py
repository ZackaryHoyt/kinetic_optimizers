# Author: Zackary Hoyt

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import os

data_df = pd.read_csv("outputs/data.csv")

os.makedirs("outputs/plots", exist_ok=True)

inputs = data_df[['k','c','std_classes','std_samples','d','n_samples']].to_numpy()
inputs = np.concatenate([inputs, 1 / inputs], axis=1)
inputs = np.concatenate([np.ones((len(inputs),1)), inputs], axis=1)

relative_improvement_true_iko = 100 * (data_df.loss_kmeans / data_df.loss_iko - 1)
relative_improvement_true_nko = 100 * (data_df.loss_kmeans / data_df.loss_nko - 1)

################################################################################################################################

ymin, ymax = (-2, 6)
stepsize_major, stepsize_minor = (2, 0.25)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

# environmental_complexities = (data_df.std_samples ** 1 * data_df.c ** 1 * data_df.n_samples ** 1) ** 0.5 / (data_df.std_classes ** 1 * data_df.k ** 1 * data_df.d ** 0) ** 0.5
environmental_complexities = (data_df.c * data_df.std_samples * data_df.n_samples * data_df.d) ** 0.5 / (data_df.k * data_df.std_classes) ** 0.5
environmental_complexities -= np.min(environmental_complexities)
environmental_complexities /= np.max(environmental_complexities)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(environmental_complexities, relative_improvement_true_iko, marker='.', alpha=0.01, c='black')
plt.hlines(y=0, xmin=np.min(environmental_complexities), xmax=np.max(environmental_complexities), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Analysis - IKO", fontsize=8)
plt.xlabel("Environmental Complexity Heuristic", fontsize=8)
plt.ylabel("Loss Reduction (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.05, 1.05)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_analysis-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(environmental_complexities, relative_improvement_true_nko, marker='.', alpha=0.01, c='black')
plt.hlines(y=0, xmin=np.min(environmental_complexities), xmax=np.max(environmental_complexities), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Analysis - NKO", fontsize=8)
plt.xlabel("Environmental Complexity Heuristic", fontsize=8)
plt.ylabel("Loss Reduction (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.05, 1.05)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_analysis-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

################################################################################################################################

model = np.array([0.614393, 0.047717, -0.028824, -0.011297, 0.013425, -0.03823, -0.029667, -1.605095, 0.17589, -0.01971, -0.036922, 1.618054, -0.49085])
y_intercept = model[0]
standardizer_std, standardizer_mean = (0.511550, 0.463340)
model_pred = standardizer_std * inputs @ model + standardizer_mean

ymin, ymax = (-2, 6)
stepsize_major, stepsize_minor = (2, 0.25)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, relative_improvement_true_iko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, relative_improvement_true_iko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.hlines(y=0, xmin=np.min(model_pred), xmax=np.max(model_pred), color='w', linewidth=0.75, alpha=0.75)
plt.vlines(x=0, ymin=np.min(relative_improvement_true_iko), ymax=np.max(relative_improvement_true_iko), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Model - IKO", fontsize=8)
plt.xlabel("Predicted (%)", fontsize=8)
plt.ylabel("Actual (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='major', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.5, 1.5)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_model-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

model = np.array([0.438939, 0.037683, -0.020882, -0.013143, 0.012328, -0.031126, -0.025065, -1.242791, 0.251627, -0.137034, 0.064285, 1.50944, -0.341097])
y_intercept = model[0]
standardizer_std, standardizer_mean = (0.336290, 0.247605)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, relative_improvement_true_nko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, relative_improvement_true_nko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.hlines(y=0, xmin=np.min(model_pred), xmax=np.max(model_pred), color='w', linewidth=0.75, alpha=0.75)
plt.vlines(x=0, ymin=np.min(relative_improvement_true_nko), ymax=np.max(relative_improvement_true_nko), color='w', linewidth=0.75, alpha=0.75)
plt.title("K-Means Loss Reduction (%) Model - NKO", fontsize=8)
plt.xlabel("Predicted (%)", fontsize=8)
plt.ylabel("Actual (%)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='major', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(-0.5, 1.5)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/kmeans_loss_reduction_model-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

################################################################################################################################

ymin, ymax = (0, 20)
stepsize_major, stepsize_minor = (5, 0.25)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

solution_complexities = data_df.c ** 0.5 * data_df.n_samples ** 0.5# / (data_df.std_classes ** 0.5 / data_df.std_samples ** 0.5) ** 0.5
solution_complexities /= np.max(solution_complexities)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(solution_complexities, data_df.n_gens_kmeans, marker='.', alpha=0.05, c='black')
plt.title("Convergence Speed (# of Steps) Analysis - K-Means", fontsize=8)
plt.xlabel("Solution Complexity Heuristic", fontsize=8)
plt.ylabel("Convergence Speed (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(0, 1.125)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/convergence_speed_analysis-kmeans.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(solution_complexities, data_df.n_gens_iko, marker='.', alpha=0.05, c='black')
plt.title("Convergence Speed (# of Steps) Analysis - IKO", fontsize=8)
plt.xlabel("Solution Complexity Heuristic", fontsize=8)
plt.ylabel("Convergence Speed (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(0, 1.125)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/convergence_speed_analysis-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(solution_complexities, data_df.n_gens_nko, marker='.', alpha=0.05, c='black')
plt.title("Convergence Speed (# of Steps) Analysis - NKO", fontsize=8)
plt.xlabel("Solution Complexity Heuristic", fontsize=8)
plt.ylabel("Convergence Speed (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.set_xticklabels(minor_ticks, minor=True)
ax.tick_params(axis='x', which='minor', labelsize=6)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(0, 1.125)
ax.set_ylim(ymin, ymax)
plt.savefig("outputs/plots/convergence_speed_analysis-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

################################################################################################################################

ymin, ymax = (-5, 20)
stepsize_major, stepsize_minor = (5, 1)
major_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_major)
minor_ticks = np.arange(ymin - stepsize_major, ymax + stepsize_major, stepsize_minor)

model = np.array([0.314969, -0.08743, 0.173975, -0.056195, 0.011152, -0.045243, 0.055571, -1.712579, -0.982006, -0.05342, -1.34424, -0.344494, -2.009366])
y_intercept = model[0]
standardizer_std, standardizer_mean = (3.068263, 6.438857)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, data_df.n_gens_kmeans, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, data_df.n_gens_kmeans, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.title("Convergence Speed (# of Steps) Model - K-Means", fontsize=8)
plt.xlabel("Predicted (# of Steps)", fontsize=8)
plt.ylabel("Actual (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(ymin, ymax)
ax.set_ylim(ymin, ymax)
plt.gca().set_aspect("equal")
plt.savefig("outputs/plots/convergence_speed_model-kmeans.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

model = np.array([0.992525, -0.066828, 0.120775, -0.045055, 0.020024, -0.010182, 0.042062, -2.563143, -1.681536, 0.042327, -1.029761, -1.291879, -3.106094])
y_intercept = model[0]
standardizer_std, standardizer_mean = (2.635254, 7.836577)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, data_df.n_gens_iko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, data_df.n_gens_iko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.title("Convergence Speed (# of Steps) Model - IKO", fontsize=8)
plt.xlabel("Predicted (# of Steps)", fontsize=8)
plt.ylabel("Actual (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(ymin, ymax)
ax.set_ylim(ymin, ymax)
plt.gca().set_aspect("equal")
plt.savefig("outputs/plots/convergence_speed_model-iko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)

model = np.array([0.607524, -0.078709, 0.154671, -0.051101, 0.018199, -0.033463, 0.050158, -2.211421, -1.294285, 0.000755, -1.147883, -0.78461, -2.542605])
y_intercept = model[0]
standardizer_std, standardizer_mean = (2.662627, 7.165780)
model_pred = standardizer_std * inputs @ model + standardizer_mean

plt.clf()
plt.gcf().set_size_inches(4, 3.5)
plt.scatter(model_pred, data_df.n_gens_nko, marker='.', alpha=0.05, c='black')
plt.plot(model_pred, np.poly1d(np.polyfit(model_pred, data_df.n_gens_nko, 1))(model_pred), color='r', linewidth=0.75, alpha=0.75)
plt.title("Convergence Speed (# of Steps) Model - NKO", fontsize=8)
plt.xlabel("Predicted (# of Steps)", fontsize=8)
plt.ylabel("Actual (# of Steps)", fontsize=8)
ax = plt.gca()
ax.set_xticks(ticks=major_ticks)
ax.set_xticks(ticks=minor_ticks, minor=True)
ax.set_yticks(ticks=major_ticks)
ax.set_yticks(ticks=minor_ticks, minor=True)
ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)
ax.tick_params(axis='both', which='both', labelsize=8)
ax.set_axisbelow(True)
ax.set_xlim(ymin, ymax)
ax.set_ylim(ymin, ymax)
plt.gca().set_aspect("equal")
plt.savefig("outputs/plots/convergence_speed_model-nko.png", dpi=300, bbox_inches='tight', pad_inches=0.025)
